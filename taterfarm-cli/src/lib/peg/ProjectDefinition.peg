// Grammar for a Project definition file.

Type = OrType

OrType = first:AndType Space? rest:OrTypeRest*
  { return rest.length === 0 ? first : { type: "OrType", location: location(), types: [first, ...rest] } }

OrTypeRest = "|" Space? type:AndType Space?
  { return type }

AndType = first:ArrayType Space? rest:AndTypeRest*
  { return rest.length === 0 ? first : { type: "AndType", location: location(), types: [first, ...rest] } }

AndTypeRest = "&" Space? type:ArrayType Space?
  { return type }

ArrayType = first:BaseType Space? rest:ArrayTypeRest*
  {
    let ret = first
    for(let i = 0; i < rest.length; i++) {
      ret = {type: "ArrayType", location: location(), elementType: ret}
    }
    return ret
  }

ArrayTypeRest = "[" Space? "]" Space?
  { return "[]" }  

BaseType = ParenType / PrimitiveType / ObjectType / TupleType / Literal / Name

ParenType = "(" Space? type:Type Space? ")"
  { return type }

PrimitiveType = NumberType / BooleanType / StringType

NumberType = "number"
  { return { type: "NumberType", location: location() } }

BooleanType = "boolean"
  { return { type: "BooleanType", location: location() } }

StringType = "string"
  { return { type: "StringType", location: location() } }

ObjectType = "{" Space? properties:ObjectTypeProperty* Space? "}"
  { return { type: "ObjectType", location: location(), properties } }

ObjectTypeProperty = name:(Identifier / StringLiteral) Space? optional:"?"? Space? ":" Space? type:Type Space? ","? Space?
  { return { name, optional: !!optional, type } }

TupleType = "[" Space? elementTypes:TupleTypeElement* Space? "]"
  { return { type: "TupleType", location: location(), elementTypes } }

TupleTypeElement = type:Type Space? optional:"?"? Space? ","? Space?
  { return { type, optional: !!optional } }

NamedType = typeName:Name
  { return { type: "NamedType", location: location(), typeName } }

Identifier
  = first:[a-zA-Z_$] rest:[a-zA-Z0-9_$]* {
      return first + rest.join("");
  }

Name = QualifiedName / UnqualifiedName

UnqualifiedName = name:Identifier
{ return {type: "UnqualifiedName", location: location(), name } }

QualifiedName = first:Identifier rest:QualifiedNamePart+
{ return {type: "QualifiedName", location: location(), name: [first, ...rest] }}

QualifiedNamePart = "." name:Identifier
{ return name }


Space = ([ \n\r\t\v\b] / Comment)+

Comment
  = SingleLineComment
  / MultiLineComment

SingleLineComment
  = "//" text:(![\r\n] .)* {
      return text.join("");
  }

MultiLineComment
  = "/*" text:(!"*/" .)* "*/" {
      return text.join("");
  }

Literal = StringLiteral / NumberLiteral / BooleanLiteral / NullLiteral

StringLiteral = value:StringLiteralValue
  { return { type: "StringLiteral", location: location(), value } }

StringLiteralValue
  = '"' doubleQuotedString:DoubleQuotedString '"' { return doubleQuotedString; }
  / "'" singleQuotedString:SingleQuotedString "'" { return singleQuotedString; }

DoubleQuotedString
  = chars:DoubleQuotedChar* { return chars.join(""); }

SingleQuotedString
  = chars:SingleQuotedChar* { return chars.join(""); }

DoubleQuotedChar
  = '\\' escape:EscapeSequence { return escape; }
  / !'"' . { return text(); }

SingleQuotedChar
  = '\\' escape:EscapeSequence { return escape; }
  / !"'" . { return text(); }

EscapeSequence
  = 'b' { return '\b'; }
  / 'f' { return '\f'; }
  / 'n' { return '\n'; }
  / 'r' { return '\r'; }
  / 't' { return '\t'; }
  / 'v' { return '\v'; }
  / '"' { return '"'; }
  / "'" { return "'"; }
  / '\\' { return '\\'; }
  / 'u' hex:HexEscape { return String.fromCharCode(parseInt(hex, 16)); }
  / 'x' hex:HexEscape { return String.fromCharCode(parseInt(hex, 16)); }

HexEscape
  = hex:[0-9a-fA-F]+ { return hex.join(""); }

NumberLiteral = value:NumberLiteralValue
  { return { type: "NumberLiteral", location: location(), value } }

NumberLiteralValue
  = HexNumber
  / BinaryNumber
  / OctalNumber
  / Float
  / Integer

HexNumber
  = "0x" digits:[0-9a-fA-F]+ { return parseInt(digits.join(""), 16); }

BinaryNumber
  = "0b" digits:[01]+ { return parseInt(digits.join(""), 2); }

OctalNumber
  = "0o" digits:[0-7]+ { return parseInt(digits.join(""), 8); }

Float
  = intPart:[0-9]* "." fracPart:[0-9]+ exp:Exponent? {
      return parseFloat(intPart.join("") + "." + fracPart.join("") + (exp || ""));
  }
  / int:[0-9]+ exp:Exponent {
      return parseFloat(int.join("") + exp);
  }

Integer
  = digits:[0-9]+ { return parseInt(digits.join(""), 10); }

Exponent
  = [eE] sign:[+-]? digits:[0-9]+ {
      return "e" + (sign || "") + digits.join("");
  }

BooleanLiteral = TrueLiteral / FalseLiteral

TrueLiteral = "true"
  { return { type: "BooleanLiteral", location: location(), value: true } }

FalseLiteral = "false"
  { return { type: "BooleanLiteral", location: location(), value: false } }

NullLiteral = "null"
  { return { type: "NullLiteral", location: location() } }
